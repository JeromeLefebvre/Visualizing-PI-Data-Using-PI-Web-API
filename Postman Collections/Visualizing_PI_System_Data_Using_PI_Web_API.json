{
  "variables": [],
  "info": {
    "name": "PI Web API",
    "_postman_id": "f2732831-4545-46e6-fcdf-6eca66746aa3",
    "description": "A short course to using PI Web API using the public port.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "5804ccb0-25cf-67b6-ce99-fb8ee2518671",
      "name": "0.  \"Visualizating PI System Data Using PI Web API\" (expand the triangle on the left)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 200\"] = responseCode.code === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://pisquare.osisoft.com/community/developers-club/blog/2017/04/19/how-to-create-a-simple-pi-data-symbol-with-pi-web-api-and-amcharts",
        "method": "GET",
        "header": [],
        "body": {},
        "description": "**Visualizating PI System Data Using PI Web API**\r\n\r\nWelcome to this course. To complete the exercise, simply go through request 1 to 6 and then attempt the final exercises. The exercises are in the note field.\r\n\r\nI would also suggest you read further [details](https://pisquare.osisoft.com/community/developers-club/blog/2017/04/19/how-to-create-a-simple-pi-data-symbol-with-pi-web-api-and-amcharts) on this training before you continue. The latest version of the training is also found in that post. If you face any issue, go to that post to get the latest version of the training, ask questions or simply to share your final exercise.\r\n\r\n**Syntax notes:**\r\n* Links to external pages are in [orange](https://pisquare.osisoft.com/community/developers-club/blog/2017/04/19/how-to-create-a-simple-pi-data-symbol-with-pi-web-api-and-amcharts).\r\n* Pieces of code or URL are highlighted being a boxed ```grey```"
      },
      "response": []
    },
    {
      "_postman_id": "a25e526d-8237-d0f3-b573-1e398817066c",
      "name": "1. Get the list of currently registered PI Data Archives",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 200\"] = responseCode.code === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/DataServers/",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "description": "This request will return the list of all PI Data Archives registered on the PI Web API end point.\r\n\r\n**Exercise**:  \r\n1. To make the request, hit the \"Send\" button.\r\n1. Verify that the return code is of [status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success) \"200 ok\". If you are not familiar with them, read up on them, in particular on the status codes 207 and also 401 and 405.\r\n1. Scroll through the body of the response to see that a name, something called a [WebID](https://techsupport.osisoft.com/Documentation/PI-Web-API/help/topics/webid.html) (a unique identifier for this object) and a collection of links is returned. Notice that the links themselves include the WebID. The format of the response is called [JSON](https://en.wikipedia.org/wiki/JSON).\r\n1. Change the URL so that it returns the list of AF servers registered to the PI Web API Endpoint. \r\nTo do so, you need to edit the word ```DataServers``` to the word ```AssetServers```. Note that there is now a path being returned.\r\n1. Change the word ```AssetServers``` to ```AssetServer``` to see what error is returned. The error code will be a [client side error code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_errors) that you have certainly seen before.\r\n\r\n\r\nAs the backslash character is used as an escape character in JSON and more generally in JavaScript, there are 4 backslashes included in the path, instead of the expected two. All paths contained in JSON will contain twice as many backslashes as expected.\r\n\r\nNothing too hard here, but with the following exercises, if you get stuck look at the corresponding solution for hints as to what needed to be done."
      },
      "response": []
    },
    {
      "_postman_id": "06409155-c4f1-55b8-8c65-27f1193ab893",
      "name": "2 a. Access the PI Web API's homepage",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 200\"] = responseCode.code === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/AssetServers",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "description": "PI Web API can be accessed in two similar, but fundamentally different, ways. One as an \"[API](https://en.wikipedia.org/wiki/Application_programming_interface)\", that is as something accepts requests and returns data, the other as a \"[service](https://en.wikipedia.org/wiki/Server_(computing))\" that can be used interactively. The service approach is particularly helpful when you want to quickly browse around what is available within PI Web API, and more importantly, when you want to view the help file.\r\n\r\nTo access PI Web API as a service, you simply need to open <https://devdata.osisoft.com/piwebapi/> in your favorite browser and enter the credentials below. The page you have just opened is commonly called the \"PI Web API's Homepage\".\r\n\r\nUsername: ```webapiuser```\r\n\r\nPassword: ```!try3.14webapi!```\r\n\r\n**Exercise**:\r\n1. We will not go into the details of the authentication for this training, but for this training we are using [basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). In other words, with each single request we are sending a username and password to PI Web API service (as we are also using https, this information is encrypted before being sent). To see this, expand the ```Headers``` tab within Postman and look at the ```Authorization``` key. The value is the username and password encoded in [Base64](https://en.wikipedia.org/wiki/Base64), to view it in a human-readable style we can use [ACM's REST API](https://helloacm.com/api/base64-decode/?s=d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=).\r\n2. In the previous Exercise, we noticed information regarding a PI Data Archive and AF Server included several links, this the general principle of being able \"[Navigable by links](https://devdata.osisoft.com/piwebapi/help/getting-started)\"."
      },
      "response": []
    },
    {
      "_postman_id": "bbdd4ebf-6aa3-8eb1-3306-090b6df474e4",
      "name": "2 b. Get a specific AF Database by using its path",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 404\"] = responseCode.code === 404;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/AssetDatabases",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "description": "Most objects, such as elements, attributes, and databases, have a unique link that allows us direct to access them.\r\n\r\n**Exercise**:\r\n1. In your browser from the PI Web API's homepage, click to the link next to \"AssetServers\". This is the URL we opened at the end of exercise 1.\r\n2. Further click on the link next to \"Databases\" to see a list of all databases on that AF Server. (Feel free to further click around to see what else is available!)\r\n3. We are in particularly interested in the database of [\"UC Davis\"](https://www.ucdavis.edu/) called [\"UCDavisBuildings\"](https://devdata.osisoft.com/piwebapi/assetdatabases/D0IRAQC7zjPUOfBqai218IAwul12djU2B0SCC5if0T5xVgUElTUlYxXFVDREFWSVNCVUlMRElOR1M). Scroll down until you find this database and then click on link next to \"Self\".\r\n4. Aside from having interactive links, accessing PI Web API as a service creates a set of links to the help documentation. Those links are located at the top of the page, click on the help page for \"AssetDatabase\". You can see the names of all the actions (i.e. methods) available to for the AssetDatabase's controller. The terms controllers and action are frequently used in Rest APIs, the usage in PI Web API follows the [convention of ASP.net](https://msdn.microsoft.com/en-us/library/dd410269(v=vs.98).aspx).\r\n5. Click on the [GetByPath](https://devdata.osisoft.com/piwebapi/help/controllers/assetserver/actions/getbypath) action.\r\n6. Here, you can see that to specify the path of the database we are interested in, we need to use a \"URL Parameter\". To see the format of this parameter, open the [\"Path Syntax\"](https://devdata.osisoft.com/piwebapi/help/topics/path-syntax) to skim how a path needs to be written, in particular, see the examples towards the bottom of the page.\r\n7. In Postman, to complete the URL already defined below, click \"Params\" to the right of the URL. In the key enter ```path``` and in the value type in ```\\\\PISRV1\\UCDavisBuildings```. This now allows you to see high level information about this database!\r\n\r\nThe help is also available online on [OSIsoft's LiveLibrary](https://techsupport.osisoft.com/Documentation/PI-Web-API/help/getting-started.html)."
      },
      "response": []
    },
    {
      "_postman_id": "451a7e20-207e-55b4-9aa9-78d96dbc85eb",
      "name": "3. How to retrieve specific information about an attribute",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 200\"] = responseCode.code === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/attributes?path=\\\\PISRV1\\UCDavisBuildings\\Buildings\\Buildings\\Vet Med 3B\\Electricity|Demand_kBtu&selectedFields=Name",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {},
        "description": "Using the URL below, we are retrieving information about an attribute. Click \"Send\" to see that only the name of this attribute is returned.\r\n\r\n**Exercise**:\r\n1. Let's explore the second argument used in the URL. Click on Params and delete the ```selectedFields``` key and re-run the query. To delete the key, hover to the right of the value and a \"x\" will appear.\r\n2. Retrieving all the data can be great in some cases, but to reduce network traffic, we often want to limit what we request from PI Web API. This is the role that the ```selectedFields``` URL argument has. Add back the key ```selectedFields``` with value ```Name```. \r\n3. As we want to retrieve more than just the name, read up on the syntax for [```selectedFields```](https://devdata.osisoft.com/piwebapi/help/topics/selected-fields) and see how we can retrieve multiple arguments.\r\n4. Modify the ```selectedFields``` parameter to retrieve both ```Links``` and ```Name``` of the attribute."
      },
      "response": []
    },
    {
      "_postman_id": "8cffc7f9-4e53-754d-97df-703530ebb5de",
      "name": "4. Rich data access (RDA) for an attribute",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 200\"] = responseCode.code === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/streams/A0EIRAQC7zjPUOfBqai218IAwlh-E14LX5hGpQQANOhgILguA8gcpW4d1YOqFJCqZ1dnwUElTUlYxXFVDREFWSVNCVUlMRElOR1NcQlVJTERJTkdTXEJVSUxESU5HU1xWRVQgTUVEIDNCXEVMRUNUUklDSVRZfERFTUFORF9LQlRV/recorded",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {},
        "description": "In this exercise, we will retrieve various data for an attribute. First, let's look at the documentation on the  [GetRecorded](https://devdata.osisoft.com/piwebapi/help/controllers/stream/actions/getrecorded) action, the action that allows us to retrieve recorded values from a tag or attribute. We can get the required URL for this action, by using the ones provided in the ```Links``` collection of an attribute. In this exercise, we are using links that were accessed in the previous exercise. Rich data access ([RDA](https://pisquare.osisoft.com/community/developers-club/blog/2012/02/10/pi-af-sdk-rich-data-access)) is the term that we commonly use to talk about all the ways data from a tag can be retrieved.\r\n\r\nFirst read over the various available URL parameters. Pay particular attention to the default values (for example, the default start time is \"*-1d\" when written in [PI Time](https://devdata.osisoft.com/piwebapi/help/topics/time-strings))\r\n\r\n**Exercise**:\r\n1. To customize this query, change the default time to one week prior starting from this morning.\r\n2. Also change the endTime to this morning at midnight.\r\n3. Let's now switch from recorded values to [summary values](https://devdata.osisoft.com/piwebapi/help/controllers/stream/actions/getsummary) what needs to be changed? You can retrieve the link from exercise 3 as well.\r\n4. We now have a query that returns to us a single summary for the previous seven days. To get a daily summary, use in the ```summaryDuration``` key and set it to ```1d```.\r\n5. We can also see that the JSON package is quite long. To reduce it, we can use the [selectedFields](https://devdata.osisoft.com/piwebapi/help/topics/selected-fields). Add in a new the ```selectedFields``` Key with value ```Items.Value.Timestamp```. \r\n5. With this request, we are only retrieving the timestamps, change the request to also retrieve the values.\r\n6. In this training, we are using data from the university of UC Davis, which is in California. The PI Web API endpoint is in the East Coast of the US and you are most probably located in a region with yet another time zone. The timestamps that are retrieved from PI Web API are all in UTC Time by default. To see the timestamps as they originate from the UC Davis campus, we need to add in the ```timeZone``` URL parameter along with the value of \"Pacific Standard Time\"."
      },
      "response": []
    },
    {
      "_postman_id": "9a00433a-6a04-1c7d-9972-a4f6e387769b",
      "name": "5 a. A batch request to combine retrieving data about an attribute and a RDA call",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 207\"] = responseCode.code === 207;",
              "",
              "var jsonData = JSON.parse(responseBody);",
              "tests[\"Correctly retrieve the attribute\"] = jsonData.getAttribute.Status === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/batch",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          },
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{  \r\n \"getAttribute\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/attributes?path=\\\\\\\\PISRV1\\\\UCDavisBuildings\\\\Buildings\\\\Buildings\\\\Vet Med 3B\\\\Electricity|Demand_kBtu\"  \r\n }\r\n}"
        },
        "description": "It is very common to want the values associated to a certain attribute, but following what we have done so far, we would first have to load up the attribute to retrieve the link for the type of data we are interested in. This would force us to make am extra requests against PI Web API. This is such a common scenario, that PI Web API [introduced](https://devdata.osisoft.com/piwebapi/help/changelog/pi-web-api) [batch requests](https://devdata.osisoft.com/piwebapi/help/controllers/batch/actions/execute), which allows multiple requests to be collected into a single request.\r\n\r\nFor the previous exercise we used the [Get method](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods), but for batch request we need to use the [Post method](https://en.wikipedia.org/wiki/POST_(HTTP)). The reason being simple, including the information about multiple requests into a single URL would be tremendously impractical. Including multiple request into the body of the POST request is much more sensible. The format of such a request, is of course, in JSON.\r\n\r\nA side benefit of using Batch request is that we can send all requests to the same URL, this can greatly simplify deploying PI Web API.\r\n\r\nThe syntax of batch requests can be a bit complicated, but the idea is that it is a collection of requests that can depend on each other. For each sub-request, there are thus information about the request itself and how this sub-request depends on other sub-requests. Let's look first at the simplest batch request which contains only a single sub-request.\r\n\r\n**Exercise**:\r\n1. Execute the request itself and look at the result and the status code. The status code is now 207, meaning that the response includes multiple statuses and those statuses are found in the body of the response. If you look at the response's body, you should see a status code of 200, which means the one sub-request included in the batch successfully went through.\r\n2. Now let's look deeper in to the request itself, first we notice that that in the body we have a main part called \"getAttribute\" (the name of the sub-request), the http method used, and the resource which is the URL of the sub-request.\r\n3. Edit the URL of the sub-request (not the batch request URL), so that we can retrieve only the SummaryData link."
      },
      "response": []
    },
    {
      "_postman_id": "d42ce84d-a5ee-636e-39c5-d18144e48b4c",
      "name": "5 b. A batch request to combine retrieving data about an attribute and a RDA call",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 207\"] = responseCode.code === 207;",
              "",
              "var jsonData = JSON.parse(responseBody);",
              "tests[\"Correctly retrieve the attribute\"] = jsonData.getAttribute.Status === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/batch",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          },
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{  \r\n \"getAttribute\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/attributes?path=\\\\\\\\PISRV1\\\\UCDavisBuildings\\\\Buildings\\\\Buildings\\\\Vet Med 3B\\\\Electricity|Demand_kBtu&selectedFields=Links.SummaryData\"  \r\n },  \r\n \"getData\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/streams/A0EIRAQC7zjPUOfBqai218IAwlh-E14LX5hGpQQANOhgILguA8gcpW4d1YOqFJCqZ1dnwUElTUlYxXFVDREFWSVNCVUlMRElOR1NcQlVJTERJTkdTXEJVSUxESU5HU1xWRVQgTUVEIDNCXEVMRUNUUklDSVRZfERFTUFORF9LQlRV/Summary?StartTime=T-7d&EndTime=T&summaryDuration=1d&selectedFields=Items.Value.Timestamp;Items.Value.Value\"\r\n }  \r\n}"
        },
        "description": "We now move on to combining the requests of exercise 3 and 4.\r\n\r\n**Exercise**:\r\n1. Run the query as it is currently defined. Notice that the \"getData\" part of the request is returned first, this is in part due that there are no dependence set up between the two sub-request and thus no natural order for which the data to be returned.\r\n1. We want to specify that the \"getData\" sub-request will depend on the getAttribute sub-requests. To add in a dependence, add in the following after the Resource line of getData.\r\n``` \"ParentIds\": [\"getAttribute\"] ```\r\nOnce you do so, you should see a red X next to the previous line in the JSON editor. This specifies that there is a syntax error in the JSON syntax. The error is that every entry needs to be comma separated. Thus, you need to add in a comma at the end of the \"Resource\" line.\r\n1. Now that the two sub-requests are dependent on each other, we can grab the link that is collected in the getAttribute sub-request and use it in the getData sub-request. To do so we further add in:\r\n``` \"Parameters\": [\"$.getAttribute.Content.Links.SummaryData\"] ```\r\n1. We now need to use the link that we have retrieved. To do so, replace the everything before the ```?``` in the URL included in the getData sub-request with simply ```{0}```. ```{0}``` stands for the first parameter in the ```Parameters``` list."
      },
      "response": []
    },
    {
      "_postman_id": "6221cd01-b666-50ca-f5bf-1fda584000c6",
      "name": "6 a. Display data as table",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 207\"] = responseCode.code === 207;",
              "",
              "var jsonData = JSON.parse(responseBody);",
              "tests[\"Correctly retrieve the attribute\"] = jsonData.getAttribute.Status === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/batch",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          },
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n\t\"getAttribute\": {\r\n\t  \"Method\": \"GET\",\r\n\t  \"Resource\": \"https://devdata.osisoft.com/piwebapi/attributes?path=\\\\\\\\PISRV1\\\\UCDavisBuildings\\\\Buildings\\\\Buildings\\\\Vet Med 3B\\\\Electricity|Demand_kBtu&selectedFields=Links.SummaryData;Name\"\r\n\t},\r\n\t\"getData\": {\r\n\t  \"Method\": \"GET\",\r\n\t  \"Resource\": \"{0}?StartTime=T-7d&EndTime=T&summaryDuration=1d&selectedFields=Items.Value.Timestamp;Items.Value.Value&TimeZone=Pacific Standard Time\",\r\n\t  \"ParentIds\": [\"getAttribute\"],\r\n\t  \"Parameters\": [\"$.getAttribute.Content.Links.SummaryData\"]\r\n\t}\r\n}"
        },
        "description": "We now move on to working on a full example written in [AngularJS](https://angularjs.org/). A popular library and used when writing PI Vision custom symbols. The example is this [JSFiddle](http://jsfiddle.net/vw8Lv3sj/10/).\r\n\r\nFirst skim over the html and JavaScript sections.\r\n\r\nThe main concept from AngularJS that we are using is that the ```$scope``` variable is a bridge between HTML and JavaScript. The attributes of the ```$scope``` variable are directly available from the html code, thus, in the JavaScript code all we need to do is build up the $scope object.\r\n\r\n**Exercise**:\r\n1. In the html code, we noticed that ```{{DefaultUnitsName}}``` is not actually used. We want to be able to display the units associated to this attribute. First, fix the batch request to also retrieve this information.\r\n2. Now that this information is returned from PI Web API, we need define an attribute of the ```$scope``` object with this information. Do this below the line that defines ```$scope.items```."
      },
      "response": []
    },
    {
      "_postman_id": "d88baed8-9228-a188-a5ce-157a1b4feb00",
      "name": "6 b. Display data as bar graph",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 207\"] = responseCode.code === 207;",
              "",
              "var jsonData = JSON.parse(responseBody);",
              "tests[\"Correctly retrieve the attribute\"] = jsonData.getAttribute.Status === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/batch",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          },
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{  \r\n \"getAttribute\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/attributes?path=\\\\\\\\PISRV1\\\\UCDavisBuildings\\\\Buildings\\\\Buildings\\\\Vet Med 3B\\\\Electricity|Demand_kBtu&selectedFields=Links.SummaryData;Name\"  \r\n },  \r\n \"getData\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"{0}?StartTime=T-7d&EndTime=T&summaryDuration=1d&selectedFields=Items.Value.Timestamp;Items.Value.Value&TimeZone=Pacific Standard Time\",  \r\n  \"ParentIds\": [\"getAttribute\"],  \r\n  \"Parameters\": [\"$.getAttribute.Content.Links.SummaryData\"]  \r\n }  \r\n}"
        },
        "description": "We now move on to working on a full example using the amCharts library.\n\nOpen this JSFiddle <http://jsfiddle.net/hqjut7a4/15/> \n\nThere is no exercise here, feel look around the code and simply enjoy your hardwork in getting here."
      },
      "response": []
    },
    {
      "_postman_id": "b38b5ca9-9f37-6937-dde1-a359e204fbc8",
      "name": "7. Final exercise",
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/batch",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          },
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{  \r\n \"getAttribute\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/attributes?path=\\\\\\\\PISRV1\\\\UCDavisBuildings\\\\Buildings\\\\Buildings\\\\Vet Med 3B\\\\Electricity|Demand_kBtu&selectedFields=Links.SummaryData\"  \r\n },  \r\n \"getData\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"{0}?StartTime=T-7d&EndTime=T&summaryDuration=1d&selectedFields=Items.Value.Timestamp;Items.Value.Value&TimeZone=Pacific Standard Time\",  \r\n  \"ParentIds\": [\"getAttribute\"],  \r\n  \"Parameters\": [\"$.getAttribute.Content.Links.SummaryData\"]  \r\n }  \r\n}"
        },
        "description": "You are now ready to move on to the final exercise.\nThe final exercise is to visit [amCharts.com](https://www.amcharts.com/) and select a symbol that you would like to use to displays information coming from your PI System. The [JavaScript Charts](https://www.amcharts.com/demos/#javascript-charts) will be the one of particular interest.\n\nThis final exercise can be completed as many times as you want. First select a symbol that displays information from a single attribute (ex: [a chart](https://www.amcharts.com/demos/date-based-data/)), then a symbol that displays data from multiple attributes or tags(ex: [a pie chart](https://www.amcharts.com/demos/simple-pie-chart/)), and then information regarding elements (ex: each element has [longitude and lattitude](https://www.amcharts.com/demos/map-dynamic-pie-charts/)) or event frames (ex: a [Gantt chart](https://www.amcharts.com/demos/gantt-chart-dates/)).\n\n1. In the JSFiddle view for your select symbol, determine where the data is located and experiment with changing some values.\n1. For your selected symbol, determine if the data that needs to be represented should come from the attribute's recorded values, plot values (ex: a [chart](https://www.amcharts.com/demos/date-based-data/)), or maybe current value (ex: [gauge](https://www.amcharts.com/demos/animated-gauge/) symbol)? Take a look at the [stream controller](https://devdata.osisoft.com/piwebapi/help/controllers/stream) for the details on the various RDA methods.\n2. Edit the batch request below to fetch the appropriate data for your symbol. You may also change the attribute to any other symbol (maybe everybody's favorite tags sinusoid or cdt158)\n3. Add in code to retrieve this data into JSFiddle. (you can fork the examples that were listed before)\n4. Now the hard part, write the JavaScript code required to transform the JSON data coming from PI Web API into the one that is required for the symbol that you selected. If this proves to be hard, you can simply execute the code in Postman, edit the data in some other text editor and post in the result in JSFiddle, this will allow you to see what it would look like and some of the work required in other to transform the data)\n\n\nTo work directly with a HTML file, you can also try [amChart's Chart Maker](https://live.amcharts.com/)."
      },
      "response": []
    },
    {
      "_postman_id": "cd9aa09d-6a80-b5bc-bf85-dbfa7b0a5f2c",
      "name": "1. (Solution) First PI Web API request, get the list of currently registered PI Data Archives copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 200\"] = responseCode.code === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/AssetServers",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {},
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "01139cc7-e205-74d7-347c-a574e39cf605",
      "name": "2. (Solution) Get a specific AF Server By using its Path",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 200\"] = responseCode.code === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/AssetDatabases?path=\\\\PISRV1\\UCDavisBuildings",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {},
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "87b55e15-59d4-8770-26e3-7a0a6d826f13",
      "name": "3. (Solution) How to retrieve specific information about an attribute",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 200\"] = responseCode.code === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/attributes?path=\\\\PISRV1\\UCDavisBuildings\\Buildings\\Buildings\\Vet Med 3B\\Electricity|Demand_kBtu&selectedFields=Name;Path;Links",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {},
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "1811c6ad-d758-a5fa-d01d-abfa828b6486",
      "name": "4. (Solution) Rich data access for an attribute",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 200\"] = responseCode.code === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/streams/A0EIRAQC7zjPUOfBqai218IAwlh-E14LX5hGpQQANOhgILguA8gcpW4d1YOqFJCqZ1dnwUElTUlYxXFVDREFWSVNCVUlMRElOR1NcQlVJTERJTkdTXEJVSUxESU5HU1xWRVQgTUVEIDNCXEVMRUNUUklDSVRZfERFTUFORF9LQlRV/Summary?startTime=T-7d&endTime=T&summaryDuration=1d&selectedFields=Items.Value.Timestamp;Items.Value.Value&timeZone=Pacific Standard Time",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {},
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "d12d0aaf-c363-80bd-5511-33da087273eb",
      "name": "5. (Solution) Use a batch request to combine step 3 and 4.",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "tests[\"Status code is 207\"] = responseCode.code === 207;",
              "",
              "var jsonData = JSON.parse(responseBody);",
              "tests[\"Correctly retrieve the attribute\"] = jsonData.getAttribute.Status === 200;",
              "tests[\"Correctly retrieve the data\"] = jsonData.getData.Status === 200;"
            ]
          }
        }
      ],
      "request": {
        "url": "https://devdata.osisoft.com/piwebapi/batch",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          },
          {
            "key": "Authorization",
            "value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{  \r\n \"getAttribute\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/attributes?path=\\\\\\\\PISRV1\\\\UCDavisBuildings\\\\Buildings\\\\Buildings\\\\Vet Med 3B\\\\Electricity|Demand_kBtu&selectedFields=Links.SummaryData\"  \r\n },  \r\n \"getData\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"{0}?StartTime=T-7d&EndTime=T&summaryDuration=1d&selectedFields=Items.Value.Timestamp;Items.Value.Value&TimeZone=Pacific Standard Time\",  \r\n  \"ParentIds\": [\"getAttribute\"],  \r\n  \"Parameters\": [\"$.getAttribute.Content.Links.SummaryData\"]  \r\n }  \r\n}"
        },
        "description": ""
      },
      "response": []
    }
  ]
}