{
	"variables": [],
	"info": {
		"name": "PI Web API",
		"_postman_id": "1be11758-5d97-6675-90d9-5d6d780e5df6",
		"description": "A short course to using PI Web API using the public port.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1. First PI Web API request, get the list of currently registered PI Data Archives",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/DataServers/",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {},
				"description": "This request will return the list of all PI Data Archives registered on the PI Web API end point.\n# Exercise:\t\n1. To make the request, hit the Send button.\n1. Verify that the return code is of status code \"200 ok\".\n1. Scroll through the body of the response to see that a Name, WebId is returned. The format of the response is called [JSON](https://en.wikipedia.org/wiki/JSON).\n1. Change the URL so that it returns the list of AF servers registered to the PI Web API Endpoint. \nTo do so, you need to edit the word \"DataServers\" to the word \"AssetServers\".\n1. Change the word \"AssetServers\" to \"AssetServer\" to see what error is returned."
			},
			"response": []
		},
		{
			"name": "2 a. Get a specific AF Server By using its Path",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/AssetServers",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {},
				"description": "PI Web API can be accessed in two similar, but fundamentally different ways. One as an \"API\", that is as something access requests and returns data, the other as a \"service\" that can be used interactively. The service approach is particularly help when you want to quickly browse around and more importanly want you want to view the help file.\n\nTo access PI Web API as a service, you simply need to open <https://devdata.osisoft.com/piwebapi/> in your favorite browser and enter the credentials below. The page you have just called in commonly called \"PI Web API's Homepage\"\n\nUsername: webapiuser\n\nPassword: !try3.14webapi!"
			},
			"response": []
		},
		{
			"name": "2 b. Get a specific AF Server By using its Path copy",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/AssetDatabases",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {},
				"description": "Excerise:\n1. Click to the link next to AssetServers, this is the URL we opened in exercise 1.\n2. Further click on the link next to Databases to see a list of all databases on that AF Server. (Feel free to click around some more to see what is available!)\n3. We are in particularly interested in the database of [UC Davis](https://www.ucdavis.edu/) called [UCDavisBuildings](https://devdata.osisoft.com/piwebapi/assetdatabases/D0IRAQC7zjPUOfBqai218IAwul12djU2B0SCC5if0T5xVgUElTUlYxXFVDREFWSVNCVUlMRElOR1M). Scrolldown until you find it and then click on self.\n4. Aside from having interactive links, you can see a series of Help page listed at the top, click on \"AssetDatabase\"'s help page. You can see all the name of the actions (i.e. methods) available to for the AssetDatabase's controller. @@ Need to find a refernce to the words Controller and Action @@\n5. Click on the [GetByPath](https://devdata.osisoft.com/piwebapi/help/controllers/assetserver/actions/getbypath) action.\n6. Here, you can see that to specify the path of the database we are interested in, we need to use a \"URL Parameter\". Open the [\"Path Syntax\"](https://devdata.osisoft.com/piwebapi/help/topics/path-syntax) to skim how a path needs to be written, in particular, the examples towards the bottom of the page.\n7. In Postman, to complete the URL already defined, click the \"Params\" bottom. In the key enter \"path\" and in the value type in \"\\\\\\PISRV1\\UCDavisBuildings\". This now allows you see high level information about this particular database!\n\nThe help is also available online on [OSIsoft's LiveLibrary](https://techsupport.osisoft.com/Documentation/PI-Web-API/help/getting-started.html)."
			},
			"response": []
		},
		{
			"name": "3. How to retrieve specific information about an attribute",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/attributes?path=\\\\PISRV1\\UCDavisBuildings\\Buildings\\Buildings\\Vet Med 3B\\Electricity|Kw&selectedFields=WebId",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {},
				"description": "In the URL below, we are retrieving information about a particular attribute. Click Send to see that only something called the [WebID](https://devdata.osisoft.com/piwebapi/help/topics/webid) of this attribute is retrieved. The WebID is simply a unique reference to this particular attribute.\n\nExercise:\n1. Let's explore the second argument used in the URL. Click on Params and delete the \"selectedFields\" key and re-run the query.\n2. Retrieving all the data can be great in some cases, but to reduce network traffic, we often want to reduce what we request from PI Web API. This is the role that the \"selectedFields\" place. Add back in the key selectedField with value WebID. \n3. Read up on the syntax for [selectedFields](https://devdata.osisoft.com/piwebapi/help/topics/selected-fields)\n4. Also now retrieve the name of the attribute.\n5. Now also retrieve the path of the attribute. You will notice that the Path in the URL and the path in the JSON body looks slightly different, the extra \\ are required as \\ is considered an escape character in JSON."
			},
			"response": []
		},
		{
			"name": "4. Rich data access for an attribute",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/streams/A0EIRAQC7zjPUOfBqai218IAwlh-E14LX5hGpQQANOhgILgMXwcPevUsV09x-RoIgfZ_wUElTUlYxXFVDREFWSVNCVUlMRElOR1NcQlVJTERJTkdTXEJVSUxESU5HU1xWRVQgTUVEIDNCXEVMRUNUUklDSVRZfEtX/recorded",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {},
				"description": "In this particular exercise we will retrieve various data for a particular attribute. First, let's look at the document on retrieving [Recorded Values](https://devdata.osisoft.com/piwebapi/help/controllers/stream/actions/getrecorded). The first thing we notice is that a webId is required to get the Recorded Value. In the URL below, we are using the WebID of the attribute in the previous exercise.\n\nFirst read over the various available URL parameters. Pay particular attention to the default values (for example, the default start time is \"*-1d\" when written in [PI Time](https://devdata.osisoft.com/piwebapi/help/topics/time-strings))\n\n@@ PI web API's endpoint, the trainer's machine and the data source all have diffent timezone, write a note on how this is dealt with. That is study on the new Time Zone parameter . @@\nExercise:\n1. To customize this query, change the default time to one week prior starting from this morning.\n2. Also change the endtime to this morning at midnight.\n3. Let's now switch from recorded values to [summary values](https://devdata.osisoft.com/piwebapi/help/controllers/stream/actions/getsummary) what needs to be changed?\n4. We now have a query that returns to us a single summary for a the whole week. To get a daily summary, use in the summaryDuration key and set it to 1d.\n5. We can also see that the JSON package is quite long. To reduce it, we can use the [selectedFields](https://devdata.osisoft.com/piwebapi/help/topics/selected-fields). Add in a new the selectedFields Key with value Items.Value.Timestamp.\n5. We are now only retrieving timestamps, add Values back in now as well.\n\nTry a Javascript [application](http://jsfiddle.net/vw8Lv3sj/3/) that makes use of this and the previous request."
			},
			"response": []
		},
		{
			"name": "5 a. Combine RDA + fetching attribute",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/batch",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n \"attribute\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/attributes?path=\\\\\\\\PISRV1\\\\UCDavisBuildings\\\\Buildings\\\\Buildings\\\\Vet Med 3B\\\\Electricity|Kw\"  \r\n }\r\n}"
				},
				"description": "It is very common to want the values associated to a certain attribute, but not know its WebID. Thus, to get the data in that situation, one would need to first retrieve the WebID and then make a second call to retrieve data associated to it. This is such a common scenario, that PI Web API [introduced](https://devdata.osisoft.com/piwebapi/help/changelog/pi-web-api) [batch requests](https://devdata.osisoft.com/piwebapi/help/controllers/batch/actions/execute), which allow multiple requests to be collected into a single one.\n\nUntil now we used Get methods, but for Batch we need to use the [Post method](https://en.wikipedia.org/wiki/POST_(HTTP)). The reason being simple, including the information about multiple requests into a single URL would be tremendously impractical. Including multiple request into the body of the POST request is much more sensible. The format of such a request, is of course in JSON.\n\nThe syntax of batch requests can be a bit complicated, but the idea is that it is a collection of requests that can depend on each other. So, there is mainly two parts to it, the request itself and information about how it depends on others. Let's look first at the simplest batch request, a single request.\n\nExercise:\n1. Execute the request itself and look at the new result and the new status code. The status code is now 207, meaning that there multiple statuses and those status are intself in the body of the response. If you look at the response's body, you should see a status code of 200, which means the one request included in the batch succefully went through.\n2. Now let's look deeper in to the request itself, first we notice that that in the body we have a main part called \"attribute\" (the name of the sub-request), the http method used, and the resource which is the URL of the sub-request.\n3. Edit the URL of the request, so that we can retrieve the WebID of the attribute."
			},
			"response": []
		},
		{
			"name": "5 b. Combine RDA + fetching attribute",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/batch",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n \"getAttribute\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/attributes?path=\\\\\\\\PISRV1\\\\UCDavisBuildings\\\\Buildings\\\\Buildings\\\\Vet Med 3B\\\\Electricity|Kw&selectedFields=WebId\"  \r\n },  \r\n \"getData\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/streams/A0EIRAQC7zjPUOfBqai218IAwlh-E14LX5hGpQQANOhgILgMXwcPevUsV09x-RoIgfZ_wUElTUlYxXFVDREFWSVNCVUlMRElOR1NcQlVJTERJTkdTXEJVSUxESU5HU1xWRVQgTUVEIDNCXEVMRUNUUklDSVRZfEtX/Summary?StartTime=T-7d&EndTime=T&summaryDuration=1d&selectedFields=Items.Value.Timestamp;Items.Value.Value\"\r\n }  \r\n}"
				},
				"description": "We now move on to two independent requests. We can now see two different 200 code being returned, information about both the attribute and the data about the attribute.\n\nExercise:\n1. We want to specify that the 'getData' sub-request actually will depend on the 'getAttribute' sub-request. To do this, add in the following after the Resource line.\n\"ParentIds\": [\"getAttribute\"]  \nOnce you do so, you should see an X next to line 9. This specifies that there is a syntax error in the JSON field. In particular, every entry needs to be comma separated. Thus, you need to add in a comma at the end of the resource line.\n1. Now that the two sub-requests are dependent on each other, we can grab data that is collected in the first request and use it in the second request, in particular we want to grab the WebID that is in the GetAttribute sub-request. To do so we further add in:\n\"Parameters\": [\"$.getAttribute.Content.WebId\"]\nThis means, from the getAttribute sub-request, grab the WebID from the Content section.\n1. Hitting send, won't actually have changed much yet. We now need to actualy use the WebID we have retrieved. To do so, replace the WebID included in the getData sub-request with simply {0} . {0} stands for the parameter.\n\nThe next two exercises are two ways of graphically representing this exact data using JavaScript.\n<http://jsfiddle.net/vw8Lv3sj/8/>  <http://jsfiddle.net/hqjut7a4/10/>"
			},
			"response": []
		},
		{
			"name": "1. (Solution) First PI Web API request, get the list of currently registered PI Data Archives copy",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/AssetServers",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {},
				"description": "This request will return the list of all PI Data Archives registered on the PI Web API end point.\n\nTo make the request, hit the Send button.\n\n# Exercise:\t\n1. Verify that the return code is of status code \"200 ok\".\n1. Scroll through the body of the response to see that a Path, Name is returned\n1. Change the URL so that it returns the list of AF servers registered to the PI Web API Endpoint. \nTo do so, you need to edit the word \"DataServers\" to the word \"AssetServers\"\n1. Change the word \"AssetServers\" to \"AssetServer\" to see what error is returned"
			},
			"response": []
		},
		{
			"name": "2. (Solution) Get a specific AF Server By using its Path copy",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/AssetDatabases?path=\\\\PISRV1\\UCDavisBuildings",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "3. (Solution) How to retrieve specific information about an attribute",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/attributes?path=\\\\PISRV1\\UCDavisBuildings\\Buildings\\Buildings|Campus Average EUI&selectedFields=WebID;Name",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {},
				"description": "In the URL below, we are retrieving information about a particular attribute. Click Send to see that only something called the [WebID](https://devdata.osisoft.com/piwebapi/help/topics/webid) of this attribute is retrieved. The WebID is simply a unique reference to this particular attribute.\n\nExercise:\n1. Let's explore the second argument used in the URL. Click on Params and delete the \"selectedFields\" key and re-run the query.\n2. Retrieving all the data can be great in some cases, but to reduce network traffic, we often want to reduce what we request from PI Web API. This is the role that the \"selectedFields\" place. Add back in the key selectedField with value WebID. \n3. Read up on the syntax for [selectedFields](https://devdata.osisoft.com/piwebapi/help/topics/selected-fields)\n4. Also now retrieve the name of the attribute.\n5. Now also retreive the path of the attribute. You will notice that the Path in the URL and the path in the JSON body looks slightly different, the extra \\ are required as \\ is considered an escape character in JSON."
			},
			"response": []
		},
		{
			"name": "4. (Solution) Rich data access for an attribute",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/streams/A0EIRAQC7zjPUOfBqai218IAwlh-E14LX5hGpQQANOhgILgMXwcPevUsV09x-RoIgfZ_wUElTUlYxXFVDREFWSVNCVUlMRElOR1NcQlVJTERJTkdTXEJVSUxESU5HU1xWRVQgTUVEIDNCXEVMRUNUUklDSVRZfEtX/Summary?StartTime=T-7d&EndTime=T&summaryDuration=1d&selectedFields=Items.Value.Timestamp;Items.Value.Value",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {},
				"description": "In this particular exercise we will retrieve various data for a particular attribute. First, let's look at the document on retrieving [Recorded Values](https://devdata.osisoft.com/piwebapi/help/controllers/stream/actions/getrecorded) the first thing we notice is that what is required in order to get the Recorded Value is a WebId. In the URL below, we are using the WebID of the attribute in the previous exercise.\n\nFirst read over the various available URL parameters. Pay particular attention to the default values (for example, the default start time is \"*-1d\" when written in [PI Time](https://devdata.osisoft.com/piwebapi/help/topics/time-strings))\n\n@@ PI web API's endpoint, the trainer's machine and the data source all have diffent timezone, write a note on how this is dealt with. That is study on the new Time Zone parameter . @@\nExercise:\n1. To customize this query, change the default time to one week prior starting from this morning.\n2. Also change the endtime to this morning at midnight.\n3. Let's now switch from recorded values to [summary values](https://devdata.osisoft.com/piwebapi/help/controllers/stream/actions/getsummary) what needs to be changed?\n4. We now have a query that returns to us a weekly sumary. We can also see that the JSON package is quite long. To reduce it, we can use the [selectedFields](https://devdata.osisoft.com/piwebapi/help/topics/selected-fields). Add in a new the selectedFields Key with value Items.Timestamp.\n5. We are now only retrieving timestamps, add Values back in now as well.\n\nTry a Javascript [application](http://jsfiddle.net/vw8Lv3sj/3/) that makes use of this and the previous request."
			},
			"response": []
		},
		{
			"name": "5. (Solution) Use a batch request to combine step 3 and 4.",
			"request": {
				"url": "https://devdata.osisoft.com/piwebapi/batch",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "Authorization",
						"value": "Basic d2ViYXBpdXNlcjohdHJ5My4xNHdlYmFwaSE=",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n \"attribute\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/attributes?path=\\\\\\\\PISRV1\\\\UCDavisBuildings\\\\Buildings\\\\Buildings\\\\Vet Med 3B\\\\Electricity|Kw&selectedFields=WebId\"  \r\n },  \r\n \"data\": {  \r\n  \"Method\": \"GET\",  \r\n  \"Resource\": \"https://devdata.osisoft.com/piwebapi/streams/{0}/summary?summaryDuration=1d&startTime=T-7d+1h&selectedFields=Items.Value.Value;Items.Value.TimeStamp\",  \r\n  \"ParentIds\": [\"attribute\"],  \r\n  \"Parameters\": [\"$.attribute.Content.WebId\"]  \r\n }  \r\n}"
				},
				"description": "Details here: https://pisquare.osisoft.com/community/all-things-pi/blog/2017/01/07/pi-web-api-getting-multiple-attributes-with-batch-requests"
			},
			"response": []
		}
	]
}